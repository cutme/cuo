/*!
 * @pluginjs/scroll-progress v0.7.18 (https://pluginjs.com)
 * Copyright 2019 Creation Studio Limited
 * Released under the GPL-3.0 License.
 */
import Component from '@pluginjs/component';
import templateEngine from '@pluginjs/template';
import Pj from '@pluginjs/factory';
import { addClass, hasClass, removeClass } from '@pluginjs/classes';
import { setStyle } from '@pluginjs/styled';
import { bindEvent, removeEvent } from '@pluginjs/events';
import { query, parseHTML, prepend } from '@pluginjs/dom';
import { styleable, eventable, stateable, optionable, register } from '@pluginjs/decorator';

var namespace = 'scrollProgress';
var events = {
  READY: 'ready',
  ENABLE: 'enable',
  DISABLE: 'disable',
  DESTROY: 'destroy',
  REFRESH: 'refresh'
};
var classes = {
  NAMESPACE: "pj-".concat(namespace),
  BAR: '{namespace}-bar',
  DISABLED: '{namespace}-disabled'
};
var methods = ['enable', 'disable', 'destroy', 'refresh'];
var defaults = {
  size: 5,
  color: '#50bcb6',
  opacity: 1,
  custom: true,
  appendTo: 'body',
  position: 'top-left',
  templates: {
    bar() {
      return '<div class="{classes.BAR}"></div>';
    }

  }
};

var _dec, _dec2, _dec3, _dec4, _dec5, _class;
var POSITIONS = ['top-left', 'top-right', 'bottom-left', 'bottom-right', 'left-bottom', 'left-top', 'right-bottom', 'right-top'];
var ScrollProgress = (_dec = styleable(classes), _dec2 = eventable(events), _dec3 = stateable(), _dec4 = optionable(defaults, true), _dec5 = register(namespace, {
  methods: methods
}), _dec(_class = _dec2(_class = _dec3(_class = _dec4(_class = _dec5(_class = class ScrollProgress extends Component {
  constructor(element) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    super(element);
    this.setupOptions(options);
    this.setupClasses();
    this.setupStates();
    this.initialize();
  }

  initialize() {
    addClass(this.classes.NAMESPACE, this.element);
    this.$bar = query(".".concat(this.classes.BAR)) ? query(".".concat(this.classes.BAR)) : parseHTML(this.creatHtml());
    this.position = POSITIONS.includes(this.options.position) ? this.options.position : POSITIONS[0];
    this.direction = this.getDirection();
    this.resetBarPosition();
    prepend(this.$bar, query(this.options.appendTo));
    this.bind();

    if (this.options.custom === true) {
      this.initBar();
    }

    this.enter('initialized');
    this.trigger(events.READY);
  }

  setBardefaultAttr() {
    if (this.direction === 'vertical') {
      setStyle({
        width: this.options.size,
        backgroundColor: this.options.color,
        opacity: this.options.opacity
      }, this.$bar);
    } else {
      setStyle({
        height: this.options.size,
        backgroundColor: this.options.color,
        opacity: this.options.opacity
      }, this.$bar);
    }
  }

  resetBarPosition() {
    if (hasClass(this.getClass("{namespace}-".concat(this.position)), this.$bar)) {
      return;
    }

    this.setBardefaultAttr();

    for (var i = 0; i < POSITIONS.length; i++) {
      removeClass(this.getClass("{namespace}-".concat(POSITIONS[i])), this.$bar);
    }

    addClass(this.getClass("{namespace}-".concat(this.position)), this.$bar);
  }

  getDirection() {
    var direction = '';
    var p = this.position.split('-')[0];

    if (p === 'left' || p === 'right') {
      direction = 'vertical';
    } else {
      direction = 'level';
    }

    return direction;
  }

  scrollTop() {
    return window.pageYOffset || document.documentElement.scrollTop;
  }

  initBar() {
    var scrollTop = this.scrollTop();
    var clientHeight = document.documentElement.clientHeight;
    var height = document.body.scrollHeight;
    var total = scrollTop / (height - clientHeight) * 100;
    this.setBarSize(total);
  }

  setBarSize(size) {
    if (this.direction === 'vertical') {
      setStyle('height', "".concat(size, "%"), this.$bar);
    } else {
      setStyle('width', "".concat(size, "%"), this.$bar);
    }
  }

  bind() {
    this.bindElement = this.options.custom ? this.element : document.body;

    if (!this.options.custom || this.bindElement === document.body) {
      Pj.emitter.on(this.eventNameWithId('scroll'), this.scrollHandle.bind(this));
    } else {
      bindEvent(this.eventName('scroll'), this.scrollHandle.bind(this), this.bindElement);
    }
  }

  unbind() {
    this.setBarSize(0);

    if (!this.options.custom || this.bindElement === document.body) {
      Pj.emitter.off(this.eventNameWithId('scroll'));
    } else {
      removeEvent(this.eventName(), this.bindElement);
    }
  }

  scrollHandle() {
    if (this.is('disabled')) {
      return;
    }

    this.resetBarPosition();
    var clientHeight;
    var height;
    var scrollTop;

    if (this.options.custom === false) {
      scrollTop = this.scrollTop();
      clientHeight = document.documentElement.clientHeight;
      height = document.body.scrollHeight;
    } else {
      scrollTop = this.element.scrollTop;
      clientHeight = this.element.clientHeight;
      height = this.element.scrollHeight;
    }

    var total = scrollTop / (height - clientHeight) * 100;
    this.setBarSize(total);
  }

  creatHtml() {
    var html = templateEngine.render(this.options.templates.bar.call(this), {
      classes: this.classes
    });
    return html;
  }

  refresh() {
    this.scrollHandle();
    this.trigger(events.REFRESH);
  }

  enable() {
    if (this.is('disabled')) {
      removeClass(this.classes.DISABLED, this.element);
      this.leave('disabled');
    }

    this.trigger(events.ENABLE);
  }

  disable() {
    if (!this.is('disabled')) {
      addClass(this.classes.DISABLED, this.element);
      this.enter('disabled');
    }

    this.trigger(events.DISABLE);
  }

  destroy() {
    if (this.is('initialized')) {
      this.unbind();
      this.leave('initialized');
    }

    this.trigger(events.DESTROY);
    super.destroy();
  }

}) || _class) || _class) || _class) || _class) || _class);

export default ScrollProgress;
