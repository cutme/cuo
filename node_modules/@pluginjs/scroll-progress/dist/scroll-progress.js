/*!
 * @pluginjs/scroll-progress v0.7.18 (https://pluginjs.com)
 * Copyright 2019 Creation Studio Limited
 * Released under the GPL-3.0 License.
 */
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('@pluginjs/component'), require('@pluginjs/template'), require('@pluginjs/factory'), require('@pluginjs/classes'), require('@pluginjs/styled'), require('@pluginjs/events'), require('@pluginjs/dom'), require('@pluginjs/decorator')) :
  typeof define === 'function' && define.amd ? define(['@pluginjs/component', '@pluginjs/template', '@pluginjs/factory', '@pluginjs/classes', '@pluginjs/styled', '@pluginjs/events', '@pluginjs/dom', '@pluginjs/decorator'], factory) :
  (global = global || self, global['@pluginjs/scroll-progress'] = factory(global['@pluginjs/component'], global['@pluginjs/template'], global['@pluginjs/factory'], global['@pluginjs/classes'], global['@pluginjs/styled'], global['@pluginjs/events'], global['@pluginjs/dom'], global['@pluginjs/decorator']));
}(this, function (Component, templateEngine, Pj, classes$1, styled, events$1, dom, decorator) { 'use strict';

  Component = Component && Component.hasOwnProperty('default') ? Component['default'] : Component;
  templateEngine = templateEngine && templateEngine.hasOwnProperty('default') ? templateEngine['default'] : templateEngine;
  Pj = Pj && Pj.hasOwnProperty('default') ? Pj['default'] : Pj;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    }

    return _assertThisInitialized(self);
  }

  function _superPropBase(object, property) {
    while (!Object.prototype.hasOwnProperty.call(object, property)) {
      object = _getPrototypeOf(object);
      if (object === null) break;
    }

    return object;
  }

  function _get(target, property, receiver) {
    if (typeof Reflect !== "undefined" && Reflect.get) {
      _get = Reflect.get;
    } else {
      _get = function _get(target, property, receiver) {
        var base = _superPropBase(target, property);

        if (!base) return;
        var desc = Object.getOwnPropertyDescriptor(base, property);

        if (desc.get) {
          return desc.get.call(receiver);
        }

        return desc.value;
      };
    }

    return _get(target, property, receiver || target);
  }

  var namespace = 'scrollProgress';
  var events = {
    READY: 'ready',
    ENABLE: 'enable',
    DISABLE: 'disable',
    DESTROY: 'destroy',
    REFRESH: 'refresh'
  };
  var classes = {
    NAMESPACE: "pj-".concat(namespace),
    BAR: '{namespace}-bar',
    DISABLED: '{namespace}-disabled'
  };
  var methods = ['enable', 'disable', 'destroy', 'refresh'];
  var defaults = {
    size: 5,
    color: '#50bcb6',
    opacity: 1,
    custom: true,
    appendTo: 'body',
    position: 'top-left',
    templates: {
      bar: function bar() {
        return '<div class="{classes.BAR}"></div>';
      }
    }
  };

  var _dec, _dec2, _dec3, _dec4, _dec5, _class;
  var POSITIONS = ['top-left', 'top-right', 'bottom-left', 'bottom-right', 'left-bottom', 'left-top', 'right-bottom', 'right-top'];
  var ScrollProgress = (_dec = decorator.styleable(classes), _dec2 = decorator.eventable(events), _dec3 = decorator.stateable(), _dec4 = decorator.optionable(defaults, true), _dec5 = decorator.register(namespace, {
    methods: methods
  }), _dec(_class = _dec2(_class = _dec3(_class = _dec4(_class = _dec5(_class =
  /*#__PURE__*/
  function (_Component) {
    _inherits(ScrollProgress, _Component);

    function ScrollProgress(element) {
      var _this;

      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, ScrollProgress);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(ScrollProgress).call(this, element));

      _this.setupOptions(options);

      _this.setupClasses();

      _this.setupStates();

      _this.initialize();

      return _this;
    }

    _createClass(ScrollProgress, [{
      key: "initialize",
      value: function initialize() {
        classes$1.addClass(this.classes.NAMESPACE, this.element);
        this.$bar = dom.query(".".concat(this.classes.BAR)) ? dom.query(".".concat(this.classes.BAR)) : dom.parseHTML(this.creatHtml());
        this.position = POSITIONS.includes(this.options.position) ? this.options.position : POSITIONS[0];
        this.direction = this.getDirection();
        this.resetBarPosition();
        dom.prepend(this.$bar, dom.query(this.options.appendTo));
        this.bind();

        if (this.options.custom === true) {
          this.initBar();
        }

        this.enter('initialized');
        this.trigger(events.READY);
      }
    }, {
      key: "setBardefaultAttr",
      value: function setBardefaultAttr() {
        if (this.direction === 'vertical') {
          styled.setStyle({
            width: this.options.size,
            backgroundColor: this.options.color,
            opacity: this.options.opacity
          }, this.$bar);
        } else {
          styled.setStyle({
            height: this.options.size,
            backgroundColor: this.options.color,
            opacity: this.options.opacity
          }, this.$bar);
        }
      }
    }, {
      key: "resetBarPosition",
      value: function resetBarPosition() {
        if (classes$1.hasClass(this.getClass("{namespace}-".concat(this.position)), this.$bar)) {
          return;
        }

        this.setBardefaultAttr();

        for (var i = 0; i < POSITIONS.length; i++) {
          classes$1.removeClass(this.getClass("{namespace}-".concat(POSITIONS[i])), this.$bar);
        }

        classes$1.addClass(this.getClass("{namespace}-".concat(this.position)), this.$bar);
      }
    }, {
      key: "getDirection",
      value: function getDirection() {
        var direction = '';
        var p = this.position.split('-')[0];

        if (p === 'left' || p === 'right') {
          direction = 'vertical';
        } else {
          direction = 'level';
        }

        return direction;
      }
    }, {
      key: "scrollTop",
      value: function scrollTop() {
        return window.pageYOffset || document.documentElement.scrollTop;
      }
    }, {
      key: "initBar",
      value: function initBar() {
        var scrollTop = this.scrollTop();
        var clientHeight = document.documentElement.clientHeight;
        var height = document.body.scrollHeight;
        var total = scrollTop / (height - clientHeight) * 100;
        this.setBarSize(total);
      }
    }, {
      key: "setBarSize",
      value: function setBarSize(size) {
        if (this.direction === 'vertical') {
          styled.setStyle('height', "".concat(size, "%"), this.$bar);
        } else {
          styled.setStyle('width', "".concat(size, "%"), this.$bar);
        }
      }
    }, {
      key: "bind",
      value: function bind() {
        this.bindElement = this.options.custom ? this.element : document.body;

        if (!this.options.custom || this.bindElement === document.body) {
          Pj.emitter.on(this.eventNameWithId('scroll'), this.scrollHandle.bind(this));
        } else {
          events$1.bindEvent(this.eventName('scroll'), this.scrollHandle.bind(this), this.bindElement);
        }
      }
    }, {
      key: "unbind",
      value: function unbind() {
        this.setBarSize(0);

        if (!this.options.custom || this.bindElement === document.body) {
          Pj.emitter.off(this.eventNameWithId('scroll'));
        } else {
          events$1.removeEvent(this.eventName(), this.bindElement);
        }
      }
    }, {
      key: "scrollHandle",
      value: function scrollHandle() {
        if (this.is('disabled')) {
          return;
        }

        this.resetBarPosition();
        var clientHeight;
        var height;
        var scrollTop;

        if (this.options.custom === false) {
          scrollTop = this.scrollTop();
          clientHeight = document.documentElement.clientHeight;
          height = document.body.scrollHeight;
        } else {
          scrollTop = this.element.scrollTop;
          clientHeight = this.element.clientHeight;
          height = this.element.scrollHeight;
        }

        var total = scrollTop / (height - clientHeight) * 100;
        this.setBarSize(total);
      }
    }, {
      key: "creatHtml",
      value: function creatHtml() {
        var html = templateEngine.render(this.options.templates.bar.call(this), {
          classes: this.classes
        });
        return html;
      }
    }, {
      key: "refresh",
      value: function refresh() {
        this.scrollHandle();
        this.trigger(events.REFRESH);
      }
    }, {
      key: "enable",
      value: function enable() {
        if (this.is('disabled')) {
          classes$1.removeClass(this.classes.DISABLED, this.element);
          this.leave('disabled');
        }

        this.trigger(events.ENABLE);
      }
    }, {
      key: "disable",
      value: function disable() {
        if (!this.is('disabled')) {
          classes$1.addClass(this.classes.DISABLED, this.element);
          this.enter('disabled');
        }

        this.trigger(events.DISABLE);
      }
    }, {
      key: "destroy",
      value: function destroy() {
        if (this.is('initialized')) {
          this.unbind();
          this.leave('initialized');
        }

        this.trigger(events.DESTROY);

        _get(_getPrototypeOf(ScrollProgress.prototype), "destroy", this).call(this);
      }
    }]);

    return ScrollProgress;
  }(Component)) || _class) || _class) || _class) || _class) || _class);

  return ScrollProgress;

}));
